input ChangePasswordInput {
  oldPassword: String!

  """user new password"""
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  PetAddMutation(input: PetAddInput!): PetAddPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Represents Pet"""
type Pet implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  age: Int
  animal: String
  breed: String
  createdAt: String
  updatedAt: String
}

input PetAddInput {
  name: String!
  age: Int!
  animal: String
  breed: String
  clientMutationId: String
}

type PetAddPayload {
  petEdge: PetEdge
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type PetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PetEdge]
}

"""An edge in a connection."""
type PetEdge {
  """The item at the end of the edge"""
  node: Pet

  """A cursor for use in pagination"""
  cursor: String!
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  pets(after: String, first: Int, before: String, last: Int, search: String): PetConnection
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Subscription {
  UserAdded: UserAddedPayload
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

type UserAddedPayload {
  userEdge: UserEdge
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
